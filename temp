export const getServerSideProps: GetServerSideProps = async (context) => {
    const { id, teamFlag } = context.params as { id: string; teamFlag: string };
    const jwt = getCookie('jwt', context);
    if (!jwt || !id || !teamFlag)
        return { notFound: true };
    let club: ClubValues;
    let team: TeamValues;
    let availablePlayers: AvailablePlayer[] = [];
    try {
        const matchResponse = await axios.get(`${BASE_URL}/matches/${id}`, {
            headers: {
                Authorization: `Bearer ${jwt}`,
            }
        });
        const match: Match = matchResponse.data;
        // Determine which team's roster to fetch
        team = teamFlag === 'home' ? match.home : match.away;
        const teamAgeGroup = team.ageGroup;
        // Get club object
        const clubResponse = await axios.get(`${BASE_URL}/clubs/${team.clubAlias}`);
        club = clubResponse.data;
        // Fetch available players from the current team
        const teamPlayerResponse = await axios.get(
            `${BASE_URL}/players/clubs/${team.clubAlias}/teams/${team.teamAlias}`, {
                headers: {
                    Authorization: `Bearer ${jwt}`,
                },
                params: {
                    sortby: 'lastName',
                    active: 'true'
                }
            }
        );
        const teamPlayers = Array.isArray(teamPlayerResponse.data.results) ? teamPlayerResponse.data.results : [];
        // If team age group is "Schüler", fetch players from "Bambini" teams
        if (teamAgeGroup === 'Schüler') {
            const bambiniTeamsResponse = await axios.get(
                `${BASE_URL}/clubs/${team.clubAlias}/teams/?ageGroup=Bambini`, {
                    headers: {
                        Authorization: `Bearer ${jwt}`,
                    },
                }
            );
            const bambiniTeams = Array.isArray(bambiniTeamsResponse.data) ? bambiniTeamsResponse.data : [];
            const bambiniPlayers: AvailablePlayer[] = [];

            for (const bambinoTeam of bambiniTeams) {
                const playersResponse = await axios.get(
                    `${BASE_URL}/players/clubs/${team.clubAlias}/teams/${bambinoTeam.alias}`, {
                        headers: {
                            Authorization: `Bearer ${jwt}`,
                        },
                    }
                );
                const players = playersResponse.data.results || [];
                bambiniPlayers.push(...players.map((player: any) => ({
                    _id: player._id,
                    firstName: player.firstName,
                    lastName: player.lastName,
                    displayFirstName: player.displayFirstName,
                    displayLastName: player.displayLastName,
                    position: player.position || 'Skater',
                    fullFaceReq: player.fullFaceReq,
                    source: player.source,
                    imageUrl: player.imageUrl,
                    imageVisible: player.imageVisible,
                    passNo: player.passNo,
                    jerseyNo: player.jerseyNo,
                    called: false
                })));
            }
            availablePlayers = [...teamPlayers, ...bambiniPlayers];
        } else {
            availablePlayers = teamPlayers; // Use only the players from the current team
        }
        // Return the necessary data to the page
        return {
            props: {
                jwt,
                match,
                club,
                team,
                rosterPublished: true, // Use your logic to determine if the roster is published
                availablePlayers,
                teamFlag
            },
        };
    } catch (error) {
        console.error('Error fetching data in getServerSideProps:', error);
        return {
            props: {
                jwt: '',
                match: null,
                club: null,
                team: null,
                availablePlayers: [],
                rosterPublished: false,
                teamFlag
            }
        };
    }
};